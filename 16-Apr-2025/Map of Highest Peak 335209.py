# Problem: Map of Highest Peak - https://leetcode.com/problems/map-of-highest-peak/description/

class Solution:
    def highestPeak(self, isWater: List[List[int]]) -> List[List[int]]:
        row = len(isWater)
        column = len(isWater[0])
        dir = [(0,1),(1,0),(-1,0),(0,-1)]
        water =[ ]
        for i in range(row):
            for j in range(column):
                if isWater[i][j]==1:
                    water.append((i,j))
                    isWater[i][j] = 0
        def inbound(r,c):
            if 0<=r<row and 0<=c<column:
                return True
            return False

        def bfs(water):
            visited = set(water)
            queue = deque()
            queue.extend(water)
            visited
            while queue:
                length = len(queue)
                for i in range(length):
                    r,c = queue.popleft()
                    visited.add((r,c))
                    for dx,dy in dir:
                        new_row = r + dx
                        new_col = c + dy
                        if inbound(new_row,new_col) and (new_row,new_col) not in visited:
                            visited.add((new_row,new_col))
                            isWater[new_row][new_col] = isWater[r][c] + 1
                            queue.append((new_row,new_col))
        
        bfs(water)
        return isWater

































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































